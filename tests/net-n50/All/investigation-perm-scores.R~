
is.pure.split = function(mem1, mem2){

	k1 = length(unique(mem1))
	k2 = length(unique(mem2))
	if(abs(k1-k2)!=1)
		return(FALSE)
	

	n = length(mem1)
	first = paste(mem1, collapse=",")
	second = paste(mem2, collapse=",")
	cmd=paste0("java -DisBatchMode=false -DfirstClusteringString=",first," -DsecondClusteringString=",second," -DisRelativeMembershipAsOutput=true -jar ClusteringEditDist.jar")
	res = system(command=cmd, intern=T)
	rel.mem2 = as.integer(unlist(strsplit(res, ",")))

	moving.nodes = c()
	for(i in 1:n){
		if(mem1[i] != rel.mem2[i])
			moving.nodes = c(moving.nodes, i) # node id and index is different
	}
    
	all.together1 = length(unique(mem1[moving.nodes]))==1
	all.together2 = length(unique(rel.mem2[moving.nodes]))==1

	if(length(moving.nodes)>3 && all.together1 && all.together2){
        cat("nb edit: ",length(moving.nodes),"\n")
		return(TRUE)
    }
	return(FALSE)
}

is.almost.pure.split = function(mem1, mem2){

	n = length(mem1)
	first = paste(mem1, collapse=",")
	second = paste(mem2, collapse=",")
	cmd=paste0("java -DisBatchMode=false -DfirstClusteringString=",first," -DsecondClusteringString=",second," -DisRelativeMembershipAsOutput=true -jar ClusteringEditDist.jar")
	res = system(command=cmd, intern=T)
	rel.mem2 = as.integer(unlist(strsplit(res, ",")))

	moving.nodes = c()
	for(i in 1:n){
		if(mem1[i] != rel.mem2[i])
			moving.nodes = c(moving.nodes, i) # node id and index is different
	}
    nb.moving.nodes = length(moving.nodes)

    for(i in 1:nb.moving.nodes){
        moving.nodes2 = moving.nodes[-i]
	    all.together1 = length(unique(mem1[moving.nodes2]))==1
	    all.together2 = length(unique(rel.mem2[moving.nodes2]))==1

	    if(nb.moving.nodes>3 && all.together1 && all.together2){
            cat("nb edit: ",length(moving.nodes),"\n")
		    return(TRUE)
        }
    }
	return(FALSE)
}


memberships = list()
nb.membership = 25
for(i in 1:nb.membership){
    membership = read.table(paste0("membership",i-1,".txt"))$V1
    memberships[[i]] = membership
}

m = read.csv("dist-matrix-Edit.csv", row.names=1)

for(i in 1:nb.membership){
	curr.mem = memberships[[i]]
	cat("i:",i,"\n")
	indxs = which(m[i,-i] > 4)
	for(indx in indxs){
		other.mem = memberships[[indx]]
        res = is.almost.pure.split(curr.mem, other.mem)
        if(res == TRUE)
		    cat(", j: ",indx," => ", res,"\n")
	}
	print("--")
}


table(memberships[[5]])
table(memberships[[33]])
is.pure.split( memberships[[5]], memberships[[33]])
